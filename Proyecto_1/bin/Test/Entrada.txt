inicio
/////inicio de la traduccion

Ingresar _variable1_      coMo NumEro cOn_valor 5;
Ingresar _variable2_      coMo NumEro cOn_valor 50;
ingresaR _v1_, _v2_, _v3_ cOmo CadenA con_vAlor "esta es una cadena";
ingresaR _curso1_         cOmo cadena con_vAlor "olc";
ingresaR _curso2_         cOmo cadena con_vAlor "olc";
ingresaR _curso3_         cOmo cadena con_vAlor "olc";
ingresar _pi1_            como numero con_valor 3;
ingresar _pi2_            como numero con_valor 3.1;
ingresar _pi3_            como numero con_valor 3.14;
ingresar _pi4_            como numero con_valor 3.141;
ingresar _anio1_          como numero con_valor 1;
ingresar _anio2_          como numero con_valor 9;
ingresar _anio3_          como numero con_valor 4;
ingresar _anio4_          como numero con_valor 5;
ingresar _variableNeg_    como numero con_valor -5.0;
ingresar _encabezado1_    como cadena con_valor "Universidad San Carlos de Guatemala...;";
ingresar _encabezado2_    como cadena con_valor "Escuela de Ciencias y Sistemas Segundo semestre";
ingresar _flag1_          como boolean  con_valor verdadero;
ingresar _flag2_          como boolean  con_valor falso;
ingresar _name1_          como caracter con_valor 'f';
ingresar _name2_          como caracter con_valor 'e';
ingresar _name3_          como caracter con_valor 'r';
ingresar _name4_, _name6_ como caracter con_valor 'n';
ingresar _name5_          como caracter con_valor 'a';
ingresar _name7_          como caracter con_valor '${100}';
ingresar _name8_          como caracter con_valor '${111}';

ingresar _operaciones1Basica_      como numero con_valor 1+(1);               //2 el resultado
ingresar _operaciones1Basica2_      como numero con_valor _operaciones1Basica_+_operaciones1Basica_;               //              
ingresar _operaciones1Intermedia_  Como nUmero con_valor 15+(9*8)+200/8*3+9;  //171 el resultado
ingresar _operaciones1Avanzadas1_  ComO numeRo con_valor ((15+9)*8+200/8*3+9);   //291 el resultado
ingresar _operaciones1Avanzadas2_  coMo numero con_valor 30 potencia [22.2-2.2] + (2);   
ingresar _operaciones1Avanzadas3_  como nuMero con_valor (30 potencia [2]) + (2);   
ingresar _operaciones1Avanzadas4_  Como numeRo con_valor (30 potencia [10-8+9-4*2-1]) + (2) ;  
ingresar _operaciones1Avanzadas5_  coMo nUmero con_valor (30 potencia [10-8+9-4*2-1]) + (2) ;  
ingresar _operaciones1Avanzadas6_  Como numeRo con_valor (5*8) modulo (1+5+6);   //4 es el resultado

ingresar _operacionRela1_ como BooleaN con_valor 5+5 mayor 5;
ingresar _operacionRela3_ como boolean con_valor _operaciones1Basica_ mayor 8;
ingresar _operacionRela3_ como BooLean con_valor (_operaciones1Basica_+6) Mayor_o_igual 8;
ingresar _operacionRela3_ como boolean con_valor (_operaciones1Basica_+6) menor_o_igual 8;
ingresar _operacionRela4_ como booleAn con_valor _operaciones1Basica_ es_iGual 8;
ingresar _operacionRela5_ como boolean con_valor _operaciones1Basica_ es_igual _operaciones1Basica_;
ingresar _operacionRela6_ como Boolean con_valor _operaciones1Basica_ es_iguAl _operaciones1Basica_+1;
ingresar _operacionRela7_ como boolEan con_valor _operaciones1Basica_ es_igual (_operaciones1Basica_)*(8+5);
ingresar _operacionRela5_ como bOoleAn con_valor _operaciones1Basica_ es_diferente _operaciones1Basica_;

_v1_ 						   -> "esta es la cadena numero 1";
_v2_, _v3_                     -> "estas cadenas deben ser diferentes";
_curso1_, _curso2_,_curso3_  -> "Organizacion de lenguajes y compiladores 1";
_curso1_, _curso2_,_curso3_  -> "Organizacion de lenguajes y compiladores 1" ;

imprimir_nl _encabezado1_;
imprimir_nl _encabezado2_;
imprimir  "...";
imprimir _anio1_ ;
imprimir _anio2_ ;
imprimir _anio3_ ;
imprimir _anio4_ ;
imprimir_nl ".";
imprimir_nl (_v3_);

si _v1_ es_igual _v2_ entonces
	imprimir_nl "Al parecer no funciona la asignacion";
	mientras not (_variable1_ mayor_o_igual 5*5+8/2) hacer
		imprimir _variable1_;
		_variable1_ -> _variable1_ + 1;
	fin_mientras
fin_si

si _v1_ es_igual _v2_
	imprimir_nl "no tiene que imprimir este mensaje";
de_lo_contrario
	imprimir "este print es un ejemplo";
fin_si

si _v1_ es_igual _v2_ entonces
	imprimir_nl "no tiene que imprimir este mensaje";
	si _v1_ es_igual 13
		imprimir_nl "mensaje de prueba";
	o_si _v1_ es_igual 14 entonces
		imprimir_nl "mensaje de prueba";
	de_lo_contrario
	    imprimir_nl "este print es un ejemplo";
	fin_si
fin_si

si _varB_ entonces
	imprimir_nl "Estas definiendo bien los valores";
	ingresar _varaux_ como Numero con_valor _variable1_ modulo 2;
	segun _varaux_ hacer
		多0? entonces
			imprimir "el valor es mayor a 0 y menos a 2";
		多2? entonces
			imprimir "el valor es mayor a 2";
	fin_segun
fin_si

ingresar _variable1_ como Numero con_valor 50.5;
ingresar _v1_, _v2_, _v3_ como Cadena con_valor "esta es una cadena";

_v1_ -> "esta es la cadena numero 1";
_v2_, _v3_ -> "estas cadenas deben ser diferentes";

imprimir_nl _v3_;

si _v1_ es_igual _v2_ entonces
	imprimir_nl "Al parecer no funciona la asignacion";
	mientras not _variable1_ mayor_o_igual 5*5+8/2 hacer
		imprimir _variable1_;
		_variable1_ -> _variable1_ + 1;
	fin_mientras
fin_si


ingresar _varB_ como Boolean con_valor falso; //tomar como "falso" o "verdadero" los valores booleanos

si _varB_ entonces
	imprimir_nl "Estas definiendo bien los valores";
	ingresar _varaux_ como Numero con_valor _variable1_ modulo 2;
	segun _varaux_ hacer
		多0? entonces
			imprimir "el valor es mayor a 0 y menos a 2";
		多2? entonces
			imprimir "el valor es mayor a 2";
	fin_segun
fin_si

ejecutar _metodo_1_();

/*Ahora empezamos con las funciones y procedimientos*/

metodo _potenciaManual_ con_parametros (_base_ Numero, _exponente_ Numero)
	ingresar _i_ como Numero con_valor 0;
	ingresar _acumulado_ como Numero con_valor 0;
	para _i_->0 hasta _exponente_-1 hacer
		_acumulado_ -> _acumulado_ + _acumulado_;
	fin_para	
	imprimir _acumulado_;
	imprimir_nl " Esta es la potencia Manual";	
fin_metodo

funcion _potenciaFuncion_ Numero con_parametros (_base_ Numero, _exponente_ Numero) 
	ingresar _potencia_ como Numero con_valor _base_ potencia [_exponente_];
	retornar _potencia_;
fin_funcion

metodo _metodo_1_
	imprimir_nl "estamos entrando al metodo 1";	
	ejecutar _potenciaManual_(3*1+4/2, 3+2);
	imprimir ejecutar _potenciaFuncion_(3*1+4/2, 3+2);
	imprimir_nl "Esta es la potencia Funcion";
fin_metodo

fin
