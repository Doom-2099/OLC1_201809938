
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Context;

import java_cup.runtime.*;
import Error.ListError;
import Error.Error;
import Model.Generator.AST;
import Model.Components.Expressions.NodeExp;
import Model.Components.Instruccions.NodeIns;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\005\000\002\005\011" +
    "\000\002\005\007\000\002\006\006\000\002\007\005\000" +
    "\002\007\003\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\007\000\002\015\010\000\002\015\007\000\002\015\011" +
    "\000\002\016\004\000\002\016\003\000\002\017\006\000" +
    "\002\020\007\000\002\021\004\000\002\021\003\000\002" +
    "\022\007\000\002\022\004\000\002\023\013\000\002\023" +
    "\012\000\002\023\015\000\002\023\014\000\002\024\007" +
    "\000\002\024\006\000\002\025\006\000\002\025\005\000" +
    "\002\026\006\000\002\026\012\000\002\026\005\000\002" +
    "\026\011\000\002\027\007\000\002\027\013\000\002\027" +
    "\006\000\002\027\012\000\002\030\005\000\002\030\003" +
    "\000\002\031\004\000\002\032\006\000\002\032\007\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\043\005\001\002\000\004\002\310\001" +
    "\002\000\036\003\035\045\024\050\006\055\034\060\015" +
    "\064\014\066\033\070\027\071\041\074\022\076\036\077" +
    "\012\100\021\101\016\001\002\000\026\005\104\011\073" +
    "\026\101\027\077\042\071\076\036\101\076\102\102\103" +
    "\072\104\074\001\002\000\064\003\ufff6\017\ufff6\044\ufff6" +
    "\045\ufff6\050\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\060\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6\076\ufff6\077" +
    "\ufff6\100\ufff6\101\ufff6\001\002\000\064\003\035\017\ufffe" +
    "\044\ufffe\045\024\050\006\052\ufffe\053\ufffe\054\ufffe\055" +
    "\034\057\ufffe\060\015\062\ufffe\064\014\065\ufffe\066\033" +
    "\067\ufffe\070\027\071\041\072\ufffe\074\022\075\ufffe\076" +
    "\036\077\012\100\021\101\016\001\002\000\064\003\ufffb" +
    "\017\ufffb\044\ufffb\045\ufffb\050\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\057\ufffb\060\ufffb\062\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\001\002\000\026" +
    "\005\104\011\073\026\101\027\077\042\071\076\036\101" +
    "\076\102\102\103\072\104\074\001\002\000\004\044\261" +
    "\001\002\000\026\005\104\011\073\026\101\027\077\042" +
    "\071\076\036\101\076\102\102\103\072\104\074\001\002" +
    "\000\026\005\104\011\073\026\101\027\077\042\071\076" +
    "\036\101\076\102\102\103\072\104\074\001\002\000\010" +
    "\016\233\021\uffeb\046\uffeb\001\002\000\004\015\232\001" +
    "\002\000\064\003\ufff8\017\ufff8\044\ufff8\045\ufff8\050\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8\062" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\001\002\000\026\005\104\011\073\026\101\027\077" +
    "\042\071\076\036\101\076\102\102\103\072\104\074\001" +
    "\002\000\004\101\214\001\002\000\064\003\ufffa\017\ufffa" +
    "\044\ufffa\045\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\057\ufffa\060\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\100\ufffa\101\ufffa\001\002\000\004\101\016" +
    "\001\002\000\064\003\ufff5\017\ufff5\044\ufff5\045\ufff5\050" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\001\002\000\064\003\ufff1\017\ufff1\044\ufff1\045" +
    "\ufff1\050\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1" +
    "\060\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\100\ufff1\101\ufff1\001\002\000\026\005\104\011\073\026" +
    "\101\027\077\042\071\076\036\101\076\102\102\103\072" +
    "\104\074\001\002\000\064\003\ufff9\017\ufff9\044\ufff9\045" +
    "\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9" +
    "\060\ufff9\062\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\101\ufff9\001\002\000\064\003\ufff7\017\ufff7\044" +
    "\ufff7\045\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\057\ufff7\060\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\077\ufff7\100\ufff7\101\ufff7\001\002\000\064\003\ufff4\017" +
    "\ufff4\044\ufff4\045\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\057\ufff4\060\ufff4\062\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001\002\000\040\003" +
    "\035\045\024\050\006\055\034\060\015\064\014\066\033" +
    "\067\177\070\027\071\041\074\022\076\036\077\012\100" +
    "\021\101\016\001\002\000\026\005\104\011\073\026\101" +
    "\027\077\042\071\076\036\101\076\102\102\103\072\104" +
    "\074\001\002\000\064\003\035\017\ufffc\044\ufffc\045\024" +
    "\050\006\052\ufffc\053\ufffc\054\ufffc\055\034\057\ufffc\060" +
    "\015\062\ufffc\064\014\065\ufffc\066\033\067\ufffc\070\027" +
    "\071\041\072\ufffc\074\022\075\ufffc\076\036\077\012\100" +
    "\021\101\016\001\002\000\004\101\150\001\002\000\004" +
    "\021\066\001\002\000\064\003\ufff3\017\ufff3\044\ufff3\045" +
    "\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3" +
    "\060\ufff3\062\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\100\ufff3\101\ufff3\001\002\000\004\101\042\001\002\000" +
    "\042\003\035\045\024\050\006\055\034\060\015\064\014" +
    "\066\033\070\027\071\041\072\045\073\044\074\022\076" +
    "\036\077\012\100\021\101\016\001\002\000\004\072\065" +
    "\001\002\000\004\011\046\001\002\000\064\003\uffb5\017" +
    "\uffb5\044\uffb5\045\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\057\uffb5\060\uffb5\062\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\001\002\000\004\101" +
    "\051\001\002\000\006\012\uffae\016\063\001\002\000\004" +
    "\012\057\001\002\000\012\022\054\023\052\024\055\025" +
    "\056\001\002\000\052\003\uffcc\012\uffcc\015\uffcc\016\uffcc" +
    "\045\uffcc\047\uffcc\050\uffcc\055\uffcc\060\uffcc\064\uffcc\066" +
    "\uffcc\070\uffcc\071\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\101\uffcc\001\002\000\006\012\uffad\016" +
    "\uffad\001\002\000\052\003\uffcf\012\uffcf\015\uffcf\016\uffcf" +
    "\045\uffcf\047\uffcf\050\uffcf\055\uffcf\060\uffcf\064\uffcf\066" +
    "\uffcf\070\uffcf\071\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\001\002\000\052\003\uffce\012" +
    "\uffce\015\uffce\016\uffce\045\uffce\047\uffce\050\uffce\055\uffce" +
    "\060\uffce\064\uffce\066\uffce\070\uffce\071\uffce\073\uffce\074" +
    "\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\001\002" +
    "\000\052\003\uffcd\012\uffcd\015\uffcd\016\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\055\uffcd\060\uffcd\064\uffcd\066\uffcd\070\uffcd" +
    "\071\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\001\002\000\040\003\035\045\024\050\006" +
    "\055\034\060\015\064\014\066\033\070\027\071\041\072" +
    "\061\074\022\076\036\077\012\100\021\101\016\001\002" +
    "\000\004\072\062\001\002\000\064\003\uffb4\017\uffb4\044" +
    "\uffb4\045\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\057\uffb4\060\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\001\002\000\064\003\uffb6\017" +
    "\uffb6\044\uffb6\045\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\057\uffb6\060\uffb6\062\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\077\uffb6\100\uffb6\101\uffb6\001\002\000\004\101" +
    "\051\001\002\000\004\012\uffaf\001\002\000\064\003\uffb7" +
    "\017\uffb7\044\uffb7\045\uffb7\050\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\057\uffb7\060\uffb7\062\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\001\002\000\026" +
    "\005\104\011\073\026\101\027\077\042\071\076\036\101" +
    "\076\102\102\103\072\104\074\001\002\000\144\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\044\uffdf\045\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\100\uffdf\101\uffdf\001\002\000\144\003\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\012\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100" +
    "\uffe0\101\uffe0\001\002\000\026\005\104\011\073\026\101" +
    "\027\077\042\071\076\036\101\076\102\102\103\072\104" +
    "\074\001\002\000\144\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\044\uffd4\045" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\001" +
    "\002\000\026\005\104\011\073\026\101\027\077\042\071" +
    "\076\036\101\076\102\102\103\072\104\074\001\002\000" +
    "\144\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002\000\144\003" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\044\uffe1\045\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\100\uffe1\101\uffe1\001\002\000\144\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\012\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\044\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\001\002\000\144\003\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\072\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\101\uffd0\001\002\000\144\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\044\uffe2" +
    "\045\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2" +
    "\001\002\000\144\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\001\002" +
    "\000\144\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\074\uffd5\075" +
    "\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\001\002\000\040" +
    "\004\115\005\122\006\114\007\111\015\144\030\121\031" +
    "\123\032\116\033\110\034\106\035\107\036\117\037\120" +
    "\040\113\041\112\001\002\000\026\005\104\011\073\026" +
    "\101\027\077\042\071\076\036\101\076\102\102\103\072" +
    "\104\074\001\002\000\144\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\044\uffea" +
    "\045\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072" +
    "\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea" +
    "\001\002\000\026\005\104\011\073\026\101\027\077\042" +
    "\071\076\036\101\076\102\102\103\072\104\074\001\002" +
    "\000\026\005\104\011\073\026\101\027\077\042\071\076" +
    "\036\101\076\102\102\103\072\104\074\001\002\000\026" +
    "\005\104\011\073\026\101\027\077\042\071\076\036\101" +
    "\076\102\102\103\072\104\074\001\002\000\026\005\104" +
    "\011\073\026\101\027\077\042\071\076\036\101\076\102" +
    "\102\103\072\104\074\001\002\000\026\005\104\011\073" +
    "\026\101\027\077\042\071\076\036\101\076\102\102\103" +
    "\072\104\074\001\002\000\026\005\104\011\073\026\101" +
    "\027\077\042\071\076\036\101\076\102\102\103\072\104" +
    "\074\001\002\000\026\005\104\011\073\026\101\027\077" +
    "\042\071\076\036\101\076\102\102\103\072\104\074\001" +
    "\002\000\026\005\104\011\073\026\101\027\077\042\071" +
    "\076\036\101\076\102\102\103\072\104\074\001\002\000" +
    "\026\005\104\011\073\026\101\027\077\042\071\076\036" +
    "\101\076\102\102\103\072\104\074\001\002\000\026\005" +
    "\104\011\073\026\101\027\077\042\071\076\036\101\076" +
    "\102\102\103\072\104\074\001\002\000\026\005\104\011" +
    "\073\026\101\027\077\042\071\076\036\101\076\102\102" +
    "\103\072\104\074\001\002\000\004\013\126\001\002\000" +
    "\026\005\104\011\073\026\101\027\077\042\071\076\036" +
    "\101\076\102\102\103\072\104\074\001\002\000\026\005" +
    "\104\011\073\026\101\027\077\042\071\076\036\101\076" +
    "\102\102\103\072\104\074\001\002\000\144\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\030\121\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\044\uffe4\045\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\001\002\000\144\003\uffe8\004\uffe8\005" +
    "\uffe8\006\114\007\111\012\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\030\121\031\123\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\001\002\000\026\005\104\011\073\026\101\027" +
    "\077\042\071\076\036\101\076\102\102\103\072\104\074" +
    "\001\002\000\040\004\115\005\122\006\114\007\111\014" +
    "\130\030\121\031\123\032\116\033\110\034\106\035\107" +
    "\036\117\037\120\040\113\041\112\001\002\000\144\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5\076\uffe5" +
    "\077\uffe5\100\uffe5\101\uffe5\001\002\000\144\003\uffdd\004" +
    "\115\005\122\006\114\007\111\012\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\030\121\031\123\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\001\002\000\144\003\uffde\004\115\005" +
    "\122\006\114\007\111\012\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\030\121\031\123\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\044\uffde\045\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\072\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde" +
    "\101\uffde\001\002\000\144\003\uffdc\004\115\005\122\006" +
    "\114\007\111\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\030\121\031\123\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc" +
    "\001\002\000\144\003\uffe9\004\uffe9\005\uffe9\006\114\007" +
    "\111\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\030\121\031\123\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\001\002" +
    "\000\144\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\030\121\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\074\uffe7\075" +
    "\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\001\002\000\144" +
    "\003\uffd8\004\115\005\122\006\114\007\111\012\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\030\121" +
    "\031\123\032\116\033\110\034\106\035\107\036\117\037" +
    "\120\040\uffd8\041\112\044\uffd8\045\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\001\002\000\144\003\uffd7" +
    "\004\115\005\122\006\114\007\111\012\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\030\121\031\123" +
    "\032\116\033\110\034\106\035\107\036\117\037\120\040" +
    "\uffd7\041\uffd7\044\uffd7\045\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\001\002\000\144\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\030\121\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\001\002\000\144\003\uffdb\004\115\005\122" +
    "\006\114\007\111\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\030\121\031\123\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\044" +
    "\uffdb\045\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\001\002\000\144\003\uffd9\004\115\005\122\006\114" +
    "\007\111\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\030\121\031\123\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\044\uffd9\045" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\001" +
    "\002\000\144\003\uffda\004\115\005\122\006\114\007\111" +
    "\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\030\121\031\123\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\044\uffda\045\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\001\002\000" +
    "\064\003\uffed\017\uffed\044\uffed\045\uffed\050\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\057\uffed\060\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\001" +
    "\002\000\040\004\115\005\122\006\114\007\111\012\146" +
    "\030\121\031\123\032\116\033\110\034\106\035\107\036" +
    "\117\037\120\040\113\041\112\001\002\000\144\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\074\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\100\uffe3\101\uffe3\001\002\000\144\003\uffd6\004\115" +
    "\005\122\006\114\007\111\012\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\030\121\031\123\032\116" +
    "\033\110\034\106\035\107\036\117\037\120\040\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\001\002\000\004\011\151\001\002\000\030" +
    "\005\104\011\073\012\152\026\101\027\077\042\071\076" +
    "\036\101\076\102\102\103\072\104\074\001\002\000\144" +
    "\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\012\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\044\uffac\045\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\100\uffac\101\uffac\001\002\000\004\012\157" +
    "\001\002\000\042\004\115\005\122\006\114\007\111\012" +
    "\uffa9\016\155\030\121\031\123\032\116\033\110\034\106" +
    "\035\107\036\117\037\120\040\113\041\112\001\002\000" +
    "\026\005\104\011\073\026\101\027\077\042\071\076\036" +
    "\101\076\102\102\103\072\104\074\001\002\000\004\012" +
    "\uffaa\001\002\000\144\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\044\uffab\045" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\001" +
    "\002\000\030\017\ufffd\044\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\057\ufffd\062\ufffd\065\ufffd\067\ufffd\072\ufffd\075\ufffd\001" +
    "\002\000\040\004\115\005\122\006\114\007\111\030\121" +
    "\031\123\032\116\033\110\034\106\035\107\036\117\037" +
    "\120\040\113\041\112\056\162\001\002\000\006\017\163" +
    "\053\165\001\002\000\026\005\104\011\073\026\101\027" +
    "\077\042\071\076\036\101\076\102\102\103\072\104\074" +
    "\001\002\000\004\057\171\001\002\000\036\003\035\045" +
    "\024\050\006\055\034\060\015\064\014\066\033\070\027" +
    "\071\041\074\022\076\036\077\012\100\021\101\016\001" +
    "\002\000\010\017\163\053\165\057\uffc2\001\002\000\004" +
    "\057\uffc3\001\002\000\010\017\uffc0\053\uffc0\057\uffc0\001" +
    "\002\000\064\003\uffc4\017\uffc4\044\uffc4\045\uffc4\050\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\062" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\001\002\000\040\004\115\005\122\006\114\007\111" +
    "\020\173\030\121\031\123\032\116\033\110\034\106\035" +
    "\107\036\117\037\120\040\113\041\112\001\002\000\004" +
    "\051\174\001\002\000\036\003\035\045\024\050\006\055" +
    "\034\060\015\064\014\066\033\070\027\071\041\074\022" +
    "\076\036\077\012\100\021\101\016\001\002\000\010\017" +
    "\uffc1\053\uffc1\057\uffc1\001\002\000\004\067\201\001\002" +
    "\000\026\005\104\011\073\026\101\027\077\042\071\076" +
    "\036\101\076\102\102\103\072\104\074\001\002\000\120" +
    "\003\uffb8\004\115\005\122\006\114\007\111\017\uffb8\030" +
    "\121\031\123\032\116\033\110\034\106\035\107\036\117" +
    "\037\120\040\113\041\112\044\uffb8\045\uffb8\050\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\062\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\001\002\000\026\005\104\011\073\026\101\027\077\042" +
    "\071\076\036\101\076\102\102\103\072\104\074\001\002" +
    "\000\120\003\uffb9\004\115\005\122\006\114\007\111\017" +
    "\uffb9\030\121\031\123\032\116\033\110\034\106\035\107" +
    "\036\117\037\120\040\113\041\112\044\uffb9\045\uffb9\050" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9" +
    "\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\001\002\000\040\004\115\005\122\006\114\007" +
    "\111\015\204\030\121\031\123\032\116\033\110\034\106" +
    "\035\107\036\117\037\120\040\113\041\112\001\002\000" +
    "\064\003\ufff0\017\ufff0\044\ufff0\045\ufff0\050\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\057\ufff0\060\ufff0\062\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\001" +
    "\002\000\004\046\206\001\002\000\012\022\054\023\052" +
    "\024\055\025\056\001\002\000\006\015\211\047\210\001" +
    "\002\000\026\005\104\011\073\026\101\027\077\042\071" +
    "\076\036\101\076\102\102\103\072\104\074\001\002\000" +
    "\064\003\uffee\017\uffee\044\uffee\045\uffee\050\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\057\uffee\060\uffee\062\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\001" +
    "\002\000\040\004\115\005\122\006\114\007\111\015\213" +
    "\030\121\031\123\032\116\033\110\034\106\035\107\036" +
    "\117\037\120\040\113\041\112\001\002\000\064\003\uffef" +
    "\017\uffef\044\uffef\045\uffef\050\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\057\uffef\060\uffef\062\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\074\uffef\075" +
    "\uffef\076\uffef\077\uffef\100\uffef\101\uffef\001\002\000\012" +
    "\022\054\023\052\024\055\025\056\001\002\000\042\003" +
    "\035\045\024\050\006\055\034\060\015\064\014\066\033" +
    "\070\027\071\041\073\220\074\022\075\217\076\036\077" +
    "\012\100\021\101\016\001\002\000\004\075\227\001\002" +
    "\000\064\003\uffb1\017\uffb1\044\uffb1\045\uffb1\050\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1\060\uffb1\062\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\001\002\000\004\011\221\001\002\000\004\101\051\001" +
    "\002\000\004\012\223\001\002\000\040\003\035\045\024" +
    "\050\006\055\034\060\015\064\014\066\033\070\027\071" +
    "\041\074\022\075\225\076\036\077\012\100\021\101\016" +
    "\001\002\000\004\075\226\001\002\000\064\003\uffb0\017" +
    "\uffb0\044\uffb0\045\uffb0\050\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\057\uffb0\060\uffb0\062\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\074\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\100\uffb0\101\uffb0\001\002\000\064\003" +
    "\uffb2\017\uffb2\044\uffb2\045\uffb2\050\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\057\uffb2\060\uffb2\062\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\001\002\000" +
    "\064\003\uffb3\017\uffb3\044\uffb3\045\uffb3\050\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3\062\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\001" +
    "\002\000\040\004\115\005\122\006\114\007\111\015\231" +
    "\030\121\031\123\032\116\033\110\034\106\035\107\036" +
    "\117\037\120\040\113\041\112\001\002\000\064\003\uffa7" +
    "\017\uffa7\044\uffa7\045\uffa7\050\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\062\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\001\002\000\064" +
    "\003\ufff2\017\ufff2\044\ufff2\045\ufff2\050\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\060\ufff2\062\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\001\002" +
    "\000\004\101\016\001\002\000\006\021\uffec\046\uffec\001" +
    "\002\000\040\004\115\005\122\006\114\007\111\021\236" +
    "\030\121\031\123\032\116\033\110\034\106\035\107\036" +
    "\117\037\120\040\113\041\112\001\002\000\026\005\104" +
    "\011\073\026\101\027\077\042\071\076\036\101\076\102" +
    "\102\103\072\104\074\001\002\000\040\004\115\005\122" +
    "\006\114\007\111\030\121\031\123\032\116\033\110\034" +
    "\106\035\107\036\117\037\120\040\113\041\112\061\240" +
    "\001\002\000\026\005\104\011\073\026\101\027\077\042" +
    "\071\076\036\101\076\102\102\103\072\104\074\001\002" +
    "\000\042\004\115\005\122\006\114\007\111\030\121\031" +
    "\123\032\116\033\110\034\106\035\107\036\117\037\120" +
    "\040\113\041\112\056\243\063\242\001\002\000\026\005" +
    "\104\011\073\026\101\027\077\042\071\076\036\101\076" +
    "\102\102\103\072\104\074\001\002\000\040\003\035\045" +
    "\024\050\006\055\034\060\015\062\244\064\014\066\033" +
    "\070\027\071\041\074\022\076\036\077\012\100\021\101" +
    "\016\001\002\000\064\003\uffbe\017\uffbe\044\uffbe\045\uffbe" +
    "\050\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\001\002\000\004\062\246\001\002\000\064" +
    "\003\uffbf\017\uffbf\044\uffbf\045\uffbf\050\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\062\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\001\002" +
    "\000\040\004\115\005\122\006\114\007\111\030\121\031" +
    "\123\032\116\033\110\034\106\035\107\036\117\037\120" +
    "\040\113\041\112\056\250\001\002\000\040\003\035\045" +
    "\024\050\006\055\034\060\015\062\251\064\014\066\033" +
    "\070\027\071\041\074\022\076\036\077\012\100\021\101" +
    "\016\001\002\000\064\003\uffbc\017\uffbc\044\uffbc\045\uffbc" +
    "\050\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\001\002\000\004\062\253\001\002\000\064" +
    "\003\uffbd\017\uffbd\044\uffbd\045\uffbd\050\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\062\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\001\002" +
    "\000\040\004\115\005\122\006\114\007\111\030\121\031" +
    "\123\032\116\033\110\034\106\035\107\036\117\037\120" +
    "\040\113\041\112\056\255\001\002\000\040\003\035\045" +
    "\024\050\006\055\034\060\015\064\014\065\257\066\033" +
    "\070\027\071\041\074\022\076\036\077\012\100\021\101" +
    "\016\001\002\000\004\065\260\001\002\000\064\003\uffba" +
    "\017\uffba\044\uffba\045\uffba\050\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\057\uffba\060\uffba\062\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\001\002\000\064" +
    "\003\uffbb\017\uffbb\044\uffbb\045\uffbb\050\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\057\uffbb\060\uffbb\062\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\001\002" +
    "\000\004\002\000\001\002\000\040\004\115\005\122\006" +
    "\114\007\111\015\263\030\121\031\123\032\116\033\110" +
    "\034\106\035\107\036\117\037\120\040\113\041\112\001" +
    "\002\000\064\003\uffa8\017\uffa8\044\uffa8\045\uffa8\050\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\062" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\001\002\000\030\017\uffff\044\uffff\052\uffff\053\uffff" +
    "\054\uffff\057\uffff\062\uffff\065\uffff\067\uffff\072\uffff\075" +
    "\uffff\001\002\000\074\003\035\004\115\005\122\006\114" +
    "\007\111\030\121\031\123\032\116\033\110\034\106\035" +
    "\107\036\117\037\120\040\113\041\112\045\024\050\006" +
    "\051\267\055\034\060\015\064\014\066\033\070\027\071" +
    "\041\074\022\076\036\077\012\100\021\101\016\001\002" +
    "\000\006\053\274\054\275\001\002\000\036\003\035\045" +
    "\024\050\006\055\034\060\015\064\014\066\033\070\027" +
    "\071\041\074\022\076\036\077\012\100\021\101\016\001" +
    "\002\000\004\052\271\001\002\000\064\003\uffcb\017\uffcb" +
    "\044\uffcb\045\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000\010\052\303" +
    "\053\305\054\275\001\002\000\010\052\uffc6\053\uffc6\054" +
    "\uffc6\001\002\000\036\003\035\045\024\050\006\055\034" +
    "\060\015\064\014\066\033\070\027\071\041\074\022\076" +
    "\036\077\012\100\021\101\016\001\002\000\026\005\104" +
    "\011\073\026\101\027\077\042\071\076\036\101\076\102" +
    "\102\103\072\104\074\001\002\000\040\004\115\005\122" +
    "\006\114\007\111\030\121\031\123\032\116\033\110\034" +
    "\106\035\107\036\117\037\120\040\113\041\112\051\277" +
    "\001\002\000\036\003\035\045\024\050\006\055\034\060" +
    "\015\064\014\066\033\070\027\071\041\074\022\076\036" +
    "\077\012\100\021\101\016\001\002\000\010\052\uffc5\053" +
    "\uffc5\054\uffc5\001\002\000\004\052\302\001\002\000\064" +
    "\003\uffca\017\uffca\044\uffca\045\uffca\050\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\057\uffca\060\uffca\062\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\001\002" +
    "\000\064\003\uffc9\017\uffc9\044\uffc9\045\uffc9\050\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\062\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\001\002\000\010\052\uffc7\053\uffc7\054\uffc7\001\002\000" +
    "\036\003\035\045\024\050\006\055\034\060\015\064\014" +
    "\066\033\070\027\071\041\074\022\076\036\077\012\100" +
    "\021\101\016\001\002\000\004\052\307\001\002\000\064" +
    "\003\uffc8\017\uffc8\044\uffc8\045\uffc8\050\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\062\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\003\001\001\000\002\001\001\000" +
    "\036\003\012\004\007\005\010\006\022\007\036\015\027" +
    "\020\017\023\030\024\006\025\024\026\031\027\037\032" +
    "\016\034\025\001\001\000\014\010\264\011\074\012\067" +
    "\013\066\032\077\001\001\000\002\001\001\000\036\003" +
    "\263\004\007\005\010\006\022\007\036\015\027\020\017" +
    "\023\030\024\006\025\024\026\031\027\037\032\016\034" +
    "\025\001\001\000\002\001\001\000\014\010\261\011\074" +
    "\012\067\013\066\032\077\001\001\000\002\001\001\000" +
    "\014\010\253\011\074\012\067\013\066\032\077\001\001" +
    "\000\014\010\234\011\074\012\067\013\066\032\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\227\011\074\012\067\013\066\032\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\202\011\074\012\067\013\066\032\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\175\004\007\005\010\006\022\007\036\015\027\020\017" +
    "\023\030\024\006\025\024\026\031\027\037\032\016\034" +
    "\025\001\001\000\014\010\160\011\074\012\067\013\066" +
    "\032\077\001\001\000\036\003\157\004\007\005\010\006" +
    "\022\007\036\015\027\020\017\023\030\024\006\025\024" +
    "\026\031\027\037\032\016\034\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\042\004\007\005\010\006\022\007\036\015" +
    "\027\020\017\023\030\024\006\025\024\026\031\027\037" +
    "\032\016\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\047\031\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\057\004" +
    "\007\005\010\006\022\007\036\015\027\020\017\023\030" +
    "\024\006\025\024\026\031\027\037\032\016\034\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\063\031\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\102\011\074\012\067\013\066" +
    "\032\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\146\011\074\012\067\013\066\032\077\001\001" +
    "\000\002\001\001\000\014\010\144\011\074\012\067\013" +
    "\066\032\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\104\011\074\012\067\013\066\032\077\001\001\000" +
    "\002\001\001\000\014\010\142\011\074\012\067\013\066" +
    "\032\077\001\001\000\014\010\141\011\074\012\067\013" +
    "\066\032\077\001\001\000\014\010\140\011\074\012\067" +
    "\013\066\032\077\001\001\000\014\010\137\011\074\012" +
    "\067\013\066\032\077\001\001\000\014\010\136\011\074" +
    "\012\067\013\066\032\077\001\001\000\014\010\135\011" +
    "\074\012\067\013\066\032\077\001\001\000\014\010\134" +
    "\011\074\012\067\013\066\032\077\001\001\000\014\010" +
    "\133\011\074\012\067\013\066\032\077\001\001\000\014" +
    "\010\132\011\074\012\067\013\066\032\077\001\001\000" +
    "\014\010\131\011\074\012\067\013\066\032\077\001\001" +
    "\000\014\010\130\011\074\012\067\013\066\032\077\001" +
    "\001\000\002\001\001\000\014\010\124\011\074\012\067" +
    "\013\066\032\077\001\001\000\014\010\123\011\074\012" +
    "\067\013\066\032\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\126\011\074\012\067\013\066\032" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\153\011\074\012\067\013\066\032\077\033\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\153\011\074\012\067\013\066\032\077\033\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\163\022\165\001\001" +
    "\000\014\010\171\011\074\012\067\013\066\032\077\001" +
    "\001\000\002\001\001\000\036\003\167\004\007\005\010" +
    "\006\022\007\036\015\027\020\017\023\030\024\006\025" +
    "\024\026\031\027\037\032\016\034\025\001\001\000\006" +
    "\021\166\022\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\174\004\007\005\010\006\022\007\036\015" +
    "\027\020\017\023\030\024\006\025\024\026\031\027\037" +
    "\032\016\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\177\011\074\012\067\013\066\032\077" +
    "\001\001\000\002\001\001\000\014\010\201\011\074\012" +
    "\067\013\066\032\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\206\001\001\000\002\001\001\000\014\010\211\011\074" +
    "\012\067\013\066\032\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\214\001\001" +
    "\000\036\003\215\004\007\005\010\006\022\007\036\015" +
    "\027\020\017\023\030\024\006\025\024\026\031\027\037" +
    "\032\016\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\221\031\046\001\001" +
    "\000\002\001\001\000\036\003\223\004\007\005\010\006" +
    "\022\007\036\015\027\020\017\023\030\024\006\025\024" +
    "\026\031\027\037\032\016\034\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\236\011\074\012\067\013\066\032\077\001" +
    "\001\000\002\001\001\000\014\010\240\011\074\012\067" +
    "\013\066\032\077\001\001\000\002\001\001\000\014\010" +
    "\246\011\074\012\067\013\066\032\077\001\001\000\036" +
    "\003\244\004\007\005\010\006\022\007\036\015\027\020" +
    "\017\023\030\024\006\025\024\026\031\027\037\032\016" +
    "\034\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\251\004\007" +
    "\005\010\006\022\007\036\015\027\020\017\023\030\024" +
    "\006\025\024\026\031\027\037\032\016\034\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\255\004\007\005\010\006\022" +
    "\007\036\015\027\020\017\023\030\024\006\025\024\026" +
    "\031\027\037\032\016\034\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\265\004\007\005\010\006\022\007\036\015\027\020" +
    "\017\023\030\024\006\025\024\026\031\027\037\032\016" +
    "\034\025\001\001\000\006\016\271\017\272\001\001\000" +
    "\036\003\267\004\007\005\010\006\022\007\036\015\027" +
    "\020\017\023\030\024\006\025\024\026\031\027\037\032" +
    "\016\034\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\303\001\001\000\002\001\001\000\036\003" +
    "\300\004\007\005\010\006\022\007\036\015\027\020\017" +
    "\023\030\024\006\025\024\026\031\027\037\032\016\034" +
    "\025\001\001\000\014\010\275\011\074\012\067\013\066" +
    "\032\077\001\001\000\002\001\001\000\036\003\277\004" +
    "\007\005\010\006\022\007\036\015\027\020\017\023\030" +
    "\024\006\025\024\026\031\027\037\032\016\034\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\305\004" +
    "\007\005\010\006\022\007\036\015\027\020\017\023\030" +
    "\024\006\025\024\026\031\027\037\032\016\034\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        if(s.value != null){
            String msg = "Error Sintactico No Recuperable\n"
            + "En la linea: " + s.right + "\n"
            + "En la columna: " + s.left + "\n"
            + "Lexema: " + s.value + "\n";

            ListError.getInstance().addError(new Error(s.left, s.right, s.value.toString(), msg, "SINTACTICO"));
        }
    }

    public void unrecovered_syntax_error(Symbol s){
        if(s.value != null){
            String msg = "Error Sintactico No Recuperable\n"
            + "En la linea: " + s.right + "\n"
            + "En la columna: " + s.left + "\n"
            + "Lexema: " + s.value + "\n";

            ListError.getInstance().addError(new Error(s.left, s.right, s.value.toString(), msg, "SINTACTICO"));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactic$actions {
  private final Sintactic parser;

  /** Constructor */
  CUP$Sintactic$actions(Sintactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action_part00000000(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactic$result;

      /* select the action based on the action number */
      switch (CUP$Sintactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		RESULT = start_val;
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactic$parser.done_parsing();
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio INSTRUCCIONES Fin 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            AST.getInstance().setRoot((ArrayList)inst);
            AST.getInstance().startWalk();
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<NodeIns> _instrucciones = (ArrayList) instrucciones;
            _instrucciones.add(0, (NodeIns)inst);
            RESULT = _instrucciones;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<NodeIns> instrucciones = new ArrayList<>();
            instrucciones.add(0, (NodeIns)inst);
            RESULT = instrucciones;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error INSTRUCCIONES 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = instrucciones;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= error 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CONDICIONAL_SI 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CICLO_PARA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CICLO_REPETIR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECLARACION_METODO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= LLAMADA_FUNCION PComa 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPRESIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = nodo; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= Retornar EXPRESION PComa 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("return");
            nodo.putFeatures("expresion", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Ingresar IDENTIFICADORES Como TIPO_DATO ConValor EXPRESION PComa 
            {
              Object RESULT =null;
		int identsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		Object idents = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion");
            nodo.putFeatures("identificadores", idents);
            nodo.putFeatures("tipoDato", TD);
            nodo.putFeatures("valor", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Ingresar IDENTIFICADORES Como TIPO_DATO PComa 
            {
              Object RESULT =null;
		int identsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object idents = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
                NodeIns nodo = new NodeIns("declaracion");
                nodo.putFeatures("identificadores", idents);
                nodo.putFeatures("tipoDato", TD);
                RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= IDENTIFICADORES Flecha EXPRESION PComa 
            {
              Object RESULT =null;
		int identsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object idents = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("asignacion");
            nodo.putFeatures("identificadores", idents);
            nodo.putFeatures("valor", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDENTIFICADORES ::= Identificador Coma IDENTIFICADORES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int identsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object idents = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<String> _idents = (ArrayList)idents;
            _idents.add(0, id);
            RESULT = idents;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<String> idents = new ArrayList<>();
            idents.add(0, id);
            RESULT = idents;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= Resta EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("M");
            nodo.setOp1(op1);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("+");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("-");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION Producto EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("*");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("/");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION Potencia CAbre EXPRESION CCierra 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeExp nodo = new NodeExp("^");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("%");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= PAbre EXPRESION PCierra 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeExp nodo = new NodeExp("()");
            nodo.setOp1(op1);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= LLAMADA_FUNCION 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = (NodeIns)val;
            String cadena = "ejecutar";
            cadena += "|" + nodo.getPropIns().get("id");
            NodeExp nodoExp = new NodeExp(cadena);
            
            if(nodo.getPropIns().get("parametros") != null) {
                nodoExp.setParametros((ArrayList)nodo.getPropIns().get("parametros"));
            }
            
            RESULT = nodoExp;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= RELACIONAL 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp val = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= LOGICO 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp val = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= VALOR 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp val = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = val; 
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RELACIONAL ::= EXPRESION Igual EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("==");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RELACIONAL ::= EXPRESION Diferente EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("!=");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RELACIONAL ::= EXPRESION Mayor EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp(">");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RELACIONAL ::= EXPRESION Menor EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("<");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RELACIONAL ::= EXPRESION MayorIg EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp(">=");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RELACIONAL ::= EXPRESION MenorIg EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("<=");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LOGICO ::= EXPRESION Or EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("||");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LOGICO",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LOGICO ::= EXPRESION And EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("&&");
            nodo.setOp1(op1);
            nodo.setOp2(op2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LOGICO",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LOGICO ::= Not EXPRESION 
            {
              NodeExp RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp op1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeExp nodo = new NodeExp("!");
            nodo.setOp1(op1);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LOGICO",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= Numero 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= Cadena 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= Caracter 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR ::= Identificador 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= True 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= False 
            {
              NodeExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = new NodeExp(val);
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_DATO ::= TNumero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_DATO ::= TCadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_DATO ::= TChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_DATO ::= TBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = val;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONAL_SI ::= Si EXPRESION Entonces INSTRUCCIONES FinSi 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("if-simple");
            nodo.putFeatures("condicion", exp);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL_SI ::= Si EXPRESION INSTRUCCIONES DeLoContrario INSTRUCCIONES FinSi 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int insts1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int insts1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object insts1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("if-else");
            NodeIns nodo2 = new NodeIns("else");
            nodo.putFeatures("condicion", exp);
            nodo.setInstrucciones((ArrayList)insts1);
            nodo2.setInstrucciones((ArrayList)insts2);
            nodo.putFeatures("else", nodo2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL_SI ::= Si EXPRESION INSTRUCCIONES CONDICIONESEXTRA FinSi 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("if-elif");
            nodo.putFeatures("condicion", exp);
            nodo.putFeatures("elif", ifs);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL_SI ::= Si EXPRESION INSTRUCCIONES CONDICIONESEXTRA DeLoContrario INSTRUCCIONES FinSi 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int insts1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int insts1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object insts1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("if-elif-else");
            NodeIns nodo2 = new NodeIns("else");
            nodo2.setInstrucciones((ArrayList)insts2);
            nodo.putFeatures("condicion", exp);
            nodo.putFeatures("elif", ifs);
            nodo.putFeatures("else", nodo2);
            nodo.setInstrucciones((ArrayList)insts1);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONESEXTRA ::= CONDICIONESEXTRA CONDICIONEXTRA 
            {
              Object RESULT =null;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object nodos = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		 
            NodeIns _nodos = (NodeIns)nodos;
            _nodos.putFeatures("elif", nodo);
            RESULT = _nodos;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONESEXTRA",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONESEXTRA ::= CONDICIONEXTRA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONESEXTRA",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONEXTRA ::= OSi EXPRESION Entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = new NodeIns("elif");
            nodo.putFeatures("condicion", exp);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CONDICIONEXTRA",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SELECCION_MULTIPLE ::= Segun EXPRESION Hacer CASOS FinSegun 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("switch");
            nodo.putFeatures("variable", exp);
            nodo.putFeatures("casos", cases);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASOS ::= CASO CASOS 
            {
              Object RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object caso = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<NodeIns> _cases = (ArrayList)cases;
            _cases.add(0, (NodeIns)caso);
            RESULT = _cases;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CASOS",15, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASOS ::= CASO 
            {
              Object RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object caso = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		  
            ArrayList<NodeIns> cases = new ArrayList<>();
            cases.add(0, (NodeIns)caso);
            RESULT = cases;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CASOS",15, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASO ::= IntAbre EXPRESION IntCierra Entonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = new NodeIns("case");
            nodo.putFeatures("expresion", exp);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASO ::= DeLoContrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = new NodeIns("case_default");
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CICLO_PARA ::= Para EXPRESION Flecha EXPRESION Hasta EXPRESION Hacer INSTRUCCIONES FinPara 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		NodeExp variable = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		NodeExp exp1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("for");
            nodo.putFeatures("variable", variable);
            nodo.putFeatures("inicio", exp1);
            nodo.putFeatures("fin", exp2);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CICLO_PARA ::= Para EXPRESION Flecha EXPRESION Hasta EXPRESION Hacer FinPara 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		NodeExp variable = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		NodeExp exp1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp exp2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("for");
            nodo.putFeatures("variable", variable);
            nodo.putFeatures("inicio", exp1);
            nodo.putFeatures("fin", exp2);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CICLO_PARA ::= Para EXPRESION Flecha EXPRESION Hasta EXPRESION Incremental EXPRESION Hacer INSTRUCCIONES FinPara 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-9)).right;
		NodeExp variable = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-9)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		NodeExp exp1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		NodeExp exp2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp inc = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("for");
            nodo.putFeatures("variable", variable);
            nodo.putFeatures("inicio", exp1);
            nodo.putFeatures("fin", exp2);
            nodo.putFeatures("incremento", inc);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CICLO_PARA ::= Para EXPRESION Flecha EXPRESION Hasta EXPRESION Incremental EXPRESION Hacer FinPara 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).right;
		NodeExp variable = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		NodeExp exp1 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		NodeExp exp2 = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp inc = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("for");
            nodo.putFeatures("variable", variable);
            nodo.putFeatures("inicio", exp1);
            nodo.putFeatures("fin", exp2);
            nodo.putFeatures("incremento", inc);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CICLO_MIENTRAS ::= Mientras EXPRESION Hacer INSTRUCCIONES FinMientras 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("while");
            nodo.putFeatures("condicion", exp);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CICLO_MIENTRAS ::= Mientras EXPRESION Hacer FinMientras 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("while");
            nodo.putFeatures("condicion", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CICLO_REPETIR ::= Repetir INSTRUCCIONES HastaQue EXPRESION 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = new NodeIns("doWhile");
            nodo.putFeatures("condicion", exp);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CICLO_REPETIR ::= Repetir HastaQue EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            NodeIns nodo = new NodeIns("doWhile");
            nodo.putFeatures("condicion", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_METODO ::= Metodo Identificador INSTRUCCIONES FinMetodo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_metodo");
            nodo.putFeatures("id", id);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_METODO ::= Metodo Identificador ConParametros PAbre PARAMETROS PCierra INSTRUCCIONES FinMetodo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_metodo");
            nodo.putFeatures("id", id);
            nodo.putFeatures("parametros", params);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_METODO ::= Metodo Identificador FinMetodo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_metodo");
            nodo.putFeatures("id", id);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_METODO ::= Metodo Identificador ConParametros PAbre PARAMETROS PCierra FinMetodo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("declaracion_metodo");
            nodo.putFeatures("id", id);
            nodo.putFeatures("parametros", params);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_METODO",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_FUNCION ::= Funcion Identificador TIPO_DATO INSTRUCCIONES FinFuncion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_funcion");
            nodo.putFeatures("id", id);
            nodo.putFeatures("tipoRetorno", TD);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_FUNCION ::= Funcion Identificador TIPO_DATO ConParametros PAbre PARAMETROS PCierra INSTRUCCIONES FinFuncion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_funcion");
            nodo.putFeatures("id", id);
            nodo.putFeatures("tipoRetorno", TD);
            nodo.putFeatures("parametros", params);
            nodo.setInstrucciones((ArrayList)insts);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_FUNCION ::= Funcion Identificador TIPO_DATO FinFuncion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("declaracion_funcion");
            nodo.putFeatures("id", id);
            nodo.putFeatures("tipoRetorno", TD);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_FUNCION ::= Funcion Identificador TIPO_DATO ConParametros PAbre PARAMETROS PCierra FinFuncion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("declaracion_funcion");
            nodo.putFeatures("id", id);
            nodo.putFeatures("tipoRetorno", TD);
            nodo.putFeatures("parametros", params);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS ::= PARAMETRO Coma PARAMETROS 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<String> _params = (ArrayList)params;
            _params.add(0, (String)param);
            RESULT = _params;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<String> params = new ArrayList<>();
            params.add(0, (String)param);
            RESULT = params;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETRO ::= Identificador TIPO_DATO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int TDleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int TDright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object TD = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            RESULT = id + "-" + TD;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAMADA_FUNCION ::= Ejecutar Identificador PAbre PCierra 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		
            NodeIns nodo = new NodeIns("ejecutar");
            nodo.putFeatures("id", id);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMADA_FUNCION ::= Ejecutar Identificador PAbre LISTA_VALORES PCierra 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("ejecutar");
            nodo.putFeatures("id", id);
            nodo.putFeatures("parametros", parametros);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_VALORES ::= EXPRESION Coma LISTA_VALORES 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<NodeExp> _exps = (ArrayList)exps;
            _exps.add(0, exp);
            RESULT = exps;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_VALORES ::= EXPRESION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		
            ArrayList<NodeExp> exps = new ArrayList<>();
            exps.add(0, (NodeExp)exp);
            RESULT = exps;  
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IMPRESIONES ::= Imprimir EXPRESION PComa 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("imprimir");
            nodo.putFeatures("expresion", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IMPRESIONES ::= ImprimirNl EXPRESION PComa 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		NodeExp exp = (NodeExp)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		
            NodeIns nodo = new NodeIns("imprimir_nl");
            nodo.putFeatures("expresion", exp);
            RESULT = nodo;
        
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
              return CUP$Sintactic$do_action_part00000000(
                               CUP$Sintactic$act_num,
                               CUP$Sintactic$parser,
                               CUP$Sintactic$stack,
                               CUP$Sintactic$top);
    }
}

}
